import jugador.*
import niveles.*
import objetos.*
import wollok.game.*
import posiciones.*


describe "Tests de colision del personaje jugador con los objetos del juego" {

	method initialize() {
		game.clear()
		game.addVisual(jugador)
	}

	test "Jugador suma vidas" {
		assert.equals(3, jugador.vida()) // cantidad de vida con la que arranca el jugador
		var vida = creadorDeVidas.nuevoObjeto()
		vida.colisionarCon(jugador)
		assert.equals(4, jugador.vida()) // el jugador colisiono con una vida y ahora sumo a 4 vidas
	}

	test "Jugador atrapa dos monedas" {
		assert.that(jugador.valorMonedasAtrapadas() == 0) // cantidad de valor por monedas con la que arranca el jugador
		var moneda1 = creadorDeMonedas.nuevoObjeto()
		var moneda2 = creadorDeMonedas.nuevoObjeto()
		moneda1.colisionarCon(jugador)
		moneda2.colisionarCon(jugador)
		assert.equals(20, jugador.valorMonedasAtrapadas()) // el jugador colisiono con una vida y ahora sumo a 200 de vida
	}
	
	test "Jugador atrapa un hielo, se congela y no se puede mover"{
		var hielo = creadorDeHielos.nuevoObjeto()
		hielo.colisionarCon(jugador) 
		// al colisinar, el jugador no puede moverse ni saltar
		assert.throwsException({jugador.moverDerecha()})
		assert.throwsException({jugador.moverIzquierda()})
		assert.throwsException({jugador.saltar()})
	}
	
	test "Jugador colisiona con una Maza y pierde"{ //este test chequea el funcionamiento de la maza y el perder del jugador
		var maza = creadorDeMazas.nuevoObjeto()
		jugador.vida(1)
		maza.colisionarCon(jugador)
		assert.equals(perdedor, jugador.estadoDeJugador())
	}
	
	test "Jugador en el borde izquierdo no puede mover hacia la izquierda" {
		jugador.position(game.at(0,1))
		assert.notThat(tablero.puedeIr(jugador, izquierda))
	}
	
	test "Jugador en el borde derecho no puede mover hacia la derecha" {
		jugador.position(game.at(game.width()-1,1))
		assert.notThat(tablero.puedeIr(jugador, derecha))
	}
	
	test "jugador Gana"{ 
		var moneda = creadorDeMonedas.nuevoObjeto()
		
		jugador.valorMonedasAtrapadas(90)
		moneda.accionAlColisionarCon(jugador)
		assert.equals(ganador,jugador.estadoDeJugador())
	}
	
	
}

