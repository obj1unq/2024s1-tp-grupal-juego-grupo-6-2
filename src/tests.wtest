import jugador.*
import niveles.*
import objetos.*
import wollok.game.*
import posiciones.*
import visores.*
import ranking.*

describe "Tests de colision del personaje jugador con los objetos del juego" {

	var nivel
	var vida
	var posicionActual
	var hielo
	var maza
	var craneo
	
	method initialize() {
		game.clear()
		game.width(20)
		game.height(10)
		game.addVisual(jugador)
		nivel = nivel1
		vida = new CreadorDeVidas(nivel=nivel).nuevoObjeto()
		posicionActual = jugador.position()
		hielo = new CreadorDeHielos(nivel=nivel).nuevoObjeto()
		maza = new CreadorDeMazas(nivel=nivel).nuevoObjeto()
		craneo = new CreadorDeCraneos(nivel=nivel).nuevoObjeto()
	}

	test "jugador movimientos" {
		jugador.position(game.at(5, 5))
		jugador.mover(jugandoDerecha)
		jugador.mover(jugandoDerecha)
		assert.equals(game.at(7, 5), jugador.position())
		jugador.mover(jugandoIzquierda)
		assert.equals(game.at(6, 5), jugador.position())
		jugador.mover(saltando) //salta y cae
		assert.equals(game.at(6, 5), jugador.position())
	}

	test "Jugador suma vidas" {
		assert.equals(3, jugador.vida()) // cantidad de vida con la que arranca el jugador
		vida.colisionarCon(jugador)
		assert.equals(4, jugador.vida()) // el jugador colisiono con una vida y ahora sumo a 4 vidas
	}

	test "Jugador atrapa dos monedas" {
		assert.that(jugador.monedas() == 0) // cantidad de valor por monedas con la que arranca el jugador
		const moneda1 = new CreadorDeMonedas(nivel=nivel).nuevoObjeto()
		const moneda2 = new CreadorDeMonedas(nivel=nivel).nuevoObjeto()
		moneda1.colisionarCon(jugador)
		moneda2.colisionarCon(jugador)
		assert.equals(2, jugador.monedas()) // el jugador colisiono con una vida y ahora sumo a 200 de vida
	}

	test "Jugador atrapa un hielo, se congela y no se puede mover" {
		jugador.position(game.at(3, 3))
		hielo.colisionarCon(jugador)
		assert.equals(congelado, jugador.estadoActual())
		jugador.mover(jugandoDerecha)
		jugador.position(game.at(3, 3))
	}

	test "Jugador colisiona con una Maza y pierde" { // este test chequea el funcionamiento de la maza y el perder del jugador
		jugador.vida(1)
		maza.colisionarCon(jugador)
		assert.equals(perdedor, jugador.estadoActual())
	}

	test "Jugador colisiona con un Craneo y pierde" { // este test chequea el funcionamiento de la maza y el perder del jugador
		jugador.vida(1)
		craneo.colisionarCon(jugador)
		assert.equals(perdedor, jugador.estadoActual())
	}
	
	test "Jugador en el borde izquierdo no puede mover hacia la izquierda" {
		jugador.position(game.at(0, 1))
		assert.notThat(tablero.puedeIr(jugador, izquierda))
	}

	test "Jugador en el borde derecho no puede mover hacia la derecha" {
		jugador.position(game.at(game.width() - 1, 1))
		assert.notThat(tablero.puedeIr(jugador, derecha))
	}

	test "desaparecer objeto y remover de la lista" {
		assert.equals(4, controladorDeNivel.nivel().objetosCreados().size())
		nivel1.objetosCreados().get(0).desaparecer()
		assert.equals(3, controladorDeNivel.nivel().objetosCreados().size())
		assert.notThat(game.hasVisual(vida))
	}

	test "ultimo nivel guarda ranking" {
		jugador.monedas(10)
		controladorDeNivel.pasarNivel()
		controladorDeNivel.pasarNivel()
		controladorDeNivel.pasarNivel()
		assert.equals(10, ranking.top())
		assert.equals(0, jugador.monedas())
		jugador.monedas(20)
		controladorDeNivel.pasarNivel()
		controladorDeNivel.pasarNivel()
		controladorDeNivel.pasarNivel()
		assert.equals(20, ranking.top())
	}

	test "reinicio de tiempo entre niveles" {
		assert.equals(10, nivel1.tiempo())
		nivel1.tiempo(0)
		nivel1.reestablecerTiempo()
		assert.equals(10, nivel1.tiempo())
	}

}

